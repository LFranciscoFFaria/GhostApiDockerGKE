---
- name: Load variables from file
  include_vars: vault_file

- name: Create Static ip
  shell: gcloud compute addresses create helloweb-ip --region {{ gcp_region }} 
  ignore_errors: true

- name: get Static ip
  shell: gcloud compute addresses describe helloweb-ip --region {{ gcp_region }} | grep -E -o --regexp="([0-9]{1,3}\.){3}[0-9]{1,3}"
  register: result
  ignore_errors: true

- name: Deploy ghost hpa
  kubernetes.core.k8s:
    state: present
    template: "{{ghost_hpa_file}}"  

- name: Replace old hostname with new hostname
  ansible.builtin.replace:
    path: inventory/gcp.yml
    regexp: 'ghost_ip: "(?:[0-9]{1,3}\.){3}[0-9]{1,3}"'
    replace: 'ghost_ip: "{{ result.stdout }}"'

- name: Refresh inventory
  meta: refresh_inventory

- name: Search for all Pods labelled app=mysql
  kubernetes.core.k8s_info:
    namespace: default
    kind: Pod
    label_selectors:
      - app = mysql
  register: pod_list

- name: Deploy ghost Service
  kubernetes.core.k8s:
    state: present
    template: "{{ ghost_service_file }}"

- name: Check if mysql pods are ready
  shell: "kubectl wait --namespace=default --for=condition=Ready pods --selector app=mysql --timeout=600s"

- name: Deploy ghost
  kubernetes.core.k8s:
    state: present
    template: "{{ghost_deploy_file}}"
    wait: true
    wait_timeout: 6000

- name: Check that you can connect (GET) to Ghost and it returns a status 200
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 5
  delay: 20

- name: Create Ghost admin
  kubernetes.core.k8s_exec:
    namespace: default
    pod: "{{ pod_list.resources.0.metadata.name }}"
    command: mysql "{{ mysql_database }}" -e "update users set name='"{{ admin_user_name }}"', password='"{{ admin_password }}"', email='"{{ admin_email }}"', status='active' where id=1"

- name: python code that opens a web browser with the ghost app
  command: /usr/bin/python3
  args:
    stdin: |
      import webbrowser
      webbrowser.open("http://{{ ghost_ip }}:{{ghost_port}}/")

- name: Create Dashboard
  shell: gcloud monitoring dashboards list --project={{ gcp_project }} --filter="displayName={{ ghost_dashboard }}" | grep "name:" || gcloud monitoring dashboards create --config-from-file dashboards/monitoring_Dashboard.json --project "{{ gcp_project }}"

- name: python code that opens a web browser with the metrics
  command: /usr/bin/python3
  args:
    stdin: |
      import webbrowser
      webbrowser.open("https://console.cloud.google.com/monitoring/dashboards/builder/8d45202c-c551-48ba-b5e9-c3d2819fbab9;duration=PT1H;tzId=Europe%2FLondon?project=ascn-tp-369011&pageState=(%22interval%22:())")